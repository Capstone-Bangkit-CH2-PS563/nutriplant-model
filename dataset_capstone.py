# -*- coding: utf-8 -*-
"""Dataset Capstone.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p1KQ5K5GCHX6ZGJ-3mV_zdmJ2B-Wgapl

# Vegetable Detection

- Data sources : https://www.kaggle.com/datasets/kritikseth/fruit-and-vegetable-image-recognition/data
- The dataset includes vegetables
"""

! chmod 600 /content/kaggle.json

! KAGGLE_CONFIG_DIR=/content/ kaggle datasets download -d kritikseth/fruit-and-vegetable-image-recognition

import zipfile
zip_file = zipfile.ZipFile('/content/fruit-and-vegetable-image-recognition.zip', 'r')
zip_file.extractall('/home/')

"""## Import Library"""

import numpy as np
import pandas as pd
from pathlib import Path
import os.path
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img,img_to_array
print(tf.__version__)

"""# Load Dataset"""

train_dir = Path('/home/train')
train_filepaths = list(train_dir.glob(r'**/*.jpg'))

test_dir = Path('/home/test')
test_filepaths = list(test_dir.glob(r'**/*.jpg'))

val_dir = Path('/home/validation')
val_filepaths = list(test_dir.glob(r'**/*.jpg'))

"""# Pre Processing"""

def image_processing(filepath):
    """ Create a DataFrame with the filepath and the labels of the pictures
    """

    labels = [str(filepath[i]).split("/")[-2] \
              for i in range(len(filepath))]

    filepath = pd.Series(filepath, name='Filepath').astype(str)
    labels = pd.Series(labels, name='Label')

    # Concatenate filepaths and labels
    df = pd.concat([filepath, labels], axis=1)

    # Shuffle the DataFrame and reset index
    df = df.sample(frac=1).reset_index(drop = True)

    return df

train_df = image_processing(train_filepaths)
test_df = image_processing(test_filepaths)
val_df = image_processing(val_filepaths)

print('-- Training set --\n')
print(f'Number of pictures: {train_df.shape[0]}\n')
print(f'Number of different labels: {len(train_df.Label.unique())}\n')
print(f'Labels: {train_df.Label.unique()}')

labels_to_drop = ['pineapple', 'banana', 'orange', 'apple', 'pear', 'watermelon', 'mango', 'kiwi', 'grapes', 'lemon']

# Filtering out rows with labels to drop
filtered_train_df = train_df[~train_df['Label'].isin(labels_to_drop)]

labels_to_drop = ['pineapple', 'banana', 'orange', 'apple', 'pear', 'watermelon', 'mango', 'kiwi', 'grapes', 'lemon']

# Filtering out rows with labels to drop
filtered_test_df = test_df[~test_df['Label'].isin(labels_to_drop)]

labels_to_drop = ['pineapple', 'banana', 'orange', 'apple', 'pear', 'watermelon', 'mango', 'kiwi', 'grapes', 'lemon']

# Filtering out rows with labels to drop
filtered_val_df = val_df[~val_df['Label'].isin(labels_to_drop)]

print('-- Training set --\n')
print(f'Number of pictures: {filtered_train_df.shape[0]}\n')
print(f'Number of different labels: {len(filtered_train_df.Label.unique())}\n')
print(f'Labels: {filtered_train_df.Label.unique()}')

filtered_train_df

# Create a DataFrame with one Label of each category
df_unique = filtered_train_df.copy().drop_duplicates(subset=["Label"]).reset_index()

# Display some pictures of the dataset
fig, axes = plt.subplots(nrows=5, ncols=6, figsize=(8, 7),
                        subplot_kw={'xticks': [], 'yticks': []})

for i, ax in enumerate(axes.flat):
    if i < 26:
        ax.imshow(plt.imread(df_unique.Filepath[i]))
        ax.set_title(df_unique.Label[i], fontsize=12)
    else:
        ax.axis('off')

plt.tight_layout(pad=0.5)
plt.show()

"""# Building the dataset"""

train_generator = tf.keras.preprocessing.image.ImageDataGenerator(
    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input
)

test_generator = tf.keras.preprocessing.image.ImageDataGenerator(
    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input
)

train_images = train_generator.flow_from_dataframe(
    dataframe=filtered_train_df,
    x_col='Filepath',
    y_col='Label',
    target_size=(224, 224),
    color_mode='rgb',
    class_mode='categorical',
    batch_size=32,
    shuffle=True,
    seed=0,
    rotation_range=30,
    zoom_range=0.15,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.15,
    horizontal_flip=True,
    fill_mode="nearest"
)

val_images = train_generator.flow_from_dataframe(
    dataframe=filtered_val_df,
    x_col='Filepath',
    y_col='Label',
    target_size=(224, 224),
    color_mode='rgb',
    class_mode='categorical',
    batch_size=32,
    shuffle=True,
    seed=0,
    rotation_range=30,
    zoom_range=0.15,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.15,
    horizontal_flip=True,
    fill_mode="nearest"
)

test_images = test_generator.flow_from_dataframe(
    dataframe=filtered_test_df,
    x_col='Filepath',
    y_col='Label',
    target_size=(224, 224),
    color_mode='rgb',
    class_mode='categorical',
    batch_size=32,
    shuffle=False
)

pretrained_model = tf.keras.applications.MobileNetV2(
    input_shape=(224, 224, 3),
    include_top=False,
    weights='imagenet',
    pooling='avg'
)
pretrained_model.trainable = False

inputs = pretrained_model.input

x = tf.keras.layers.Dense(128, activation='relu')(pretrained_model.output)
x = tf.keras.layers.Dense(128, activation='relu')(x)

outputs = tf.keras.layers.Dense(26, activation='softmax')(x)

model = tf.keras.Model(inputs=inputs, outputs=outputs)

model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

history = model.fit(
    train_images,
    validation_data=val_images,
    batch_size = 32,
    epochs=5,
    callbacks=[
        tf.keras.callbacks.EarlyStopping(
            monitor='val_loss',
            patience=2,
            restore_best_weights=True
        )
    ]
)

acc = [0.] + history.history['accuracy']
val_acc = [0.] + history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

plt.figure(figsize=(9, 6))

# Plot Training and Validation Accuracy
plt.subplot(2, 2, 1)
plt.plot(acc, label='Training Accuracy')
plt.plot(val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.ylabel('Accuracy')
plt.ylim([min(min(acc), min(val_acc)), 1])
plt.title('Training and Validation Accuracy')

plt.xlabel('epoch')
plt.tight_layout()

# Plot Training and Validation Loss
plt.subplot(2, 2, 2)
plt.plot(loss, label='Training Loss')
plt.plot(val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.ylabel('Cross Entropy')
plt.ylim([0, max(max(loss), max(val_loss))])
plt.title('Training and Validation Loss')

plt.xlabel('epoch')
plt.tight_layout()
plt.show()

# Predict the label of the test_images
pred = model.predict(test_images)
pred = np.argmax(pred,axis=1)
# Map the label
labels = (train_images.class_indices)
labels = dict((v,k) for k,v in labels.items())
pred1 = [labels[k] for k in pred]
pred1

def output(location):
    img=load_img(location,target_size=(224,224,3))
    img=img_to_array(img)
    img=img/255
    img=np.expand_dims(img,[0])
    answer=model.predict(img)
    y_class = answer.argmax(axis=-1)
    y = " ".join(str(x) for x in y_class)
    y = int(y)
    res = labels[y]
    return res

img = output('/home/train/cucumber/Image_10.jpg')
img

model.save('model.h5')